fn decode_dofus_message(
    packet_content: &mut ByteBuffer,
    packet_id: u16,
    length: usize,
    port: u16,
) -> DofusPacket {
    let initial_pos = packet_content.get_rpos();

    // Parse the message
    let message_object = DofusPacket::parse_ba_to_object(packet_content);

    let consumed = packet_content.get_rpos() - initial_pos;
    packet_content.clear();

    if length - consumed != 0 {
        println!("warning: forced to trim a packet !");
        packet_content.set_rpos(min(initial_pos + length, packet_content.len()));
    }

    return message_object;
}

let decoded =
PacketDecoder::decode_dofus_message(&mut ba, packet_id, length, port);

let decoded = PacketDecoder::decode_dofus_message(
    &mut self.sba,
    self.split_packet_id,
    self.split_packet_length,
    self.split_packet_port,
);
